!SESSION 2021-09-26 18:00:17.507 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-26 18:03:33.818
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-26 18:03:33.818
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2358443e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@25e796fe,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-26 18:03:36.061
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.oomph.setup.ui 1 0 2021-09-26 18:03:44.337
!MESSAGE Setup tasks were performed during startup updating 4 preferences.See 'C:\Users\omart\eclipse\java-2021-03\eclipse\configuration\org.eclipse.oomph.setup\setup.log' for details
!SESSION 2021-09-26 18:04:31.828 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-26 18:04:37.812
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-26 18:04:37.812
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4cb82b09,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@49665f92,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-26 18:04:39.270
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2021-09-26 18:27:26.379
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;


import java.security.InvalidParameterException;
import java.text.DecimalFormat;

/**
 * Titulo: Clase Graph
 * 
 * @author UO281847
 * @version 24/09/2021
 * @param <T>
 */
public class Graph <T>{   
	/**
	 * Atributo nodes
	 */
    protected T[] nodes; // Vector de nodos   
    /**
     * Atributo edges
     */
    protected boolean[][] edges; // matriz de aristas   
    /**
     * Atributo weights
     */    
    protected double[][] weights; // matriz de pesos   
    /**
     * Atributo numNodes
     */
    protected int numNodes; // número de elementos en un momento dado   
   
   

    /**   
    * Se le pasa el numero maximo de nodos del grafo
    * 
    * @param tam, tanaño del vector de nodos
    */   
    @SuppressWarnings("unchecked")   
    public Graph(int tam) {   
        if (tam<0){
        	throw new InvalidParameterException("Error: No puede crear un grafo de tamaño negativo");
        }
        nodes = (T[])new Object[tam];
        edges = new boolean[tam][tam];
        weights = new double[tam][tam];
        numNodes=0;
    }       
    /**  
     * Inserta un nuevo nodo que se le pasa como parámetro si lo inserta devuelve 0.
     * Error 1: si ya existe, valor -1 
     * Error 2: no cabe, valor -2 
     * Error 3: el nodo a insertar no es válido, valor –4
     * Se suman los errores en caso de que se den varios, por ejemplo: 
     * si además de no ser válido no cabe, devuelve -6 (suma errores 2 y 3)
     * 
     * @return 0, -1, -2, -4 o la suma
     */   
     public int addNode(T node) {   
    	int error = 0;
      	if (existsNode(node)) {
      		error=error-1;
      	}
      	if (isFull()) {
      		error=error-2;
      	}
      	if (node.equals(null)) {
      		error=error-4;
      	}
      	return error;
     	if (numNodes==0) {
     		addNodeFirst(node);
     		return 0;
     	} else (numNodes>0) {
     		addNodeElse(node);
     		return 0;
     	}	
     		
    }    
    /**
     * Método que añade un nodo en la primera posición
     * 
     * @param node, nodo a añadir
     */
    private void addNodeFirst(T node) {
    	nodes[0]=node;
    	edges[0][0]=false;
    	numNodes++;
    }
    /**
     * Método que añade un nodo en la siguiente posición no ocupada
     *  
     * @param node, nodo a añadir
     */
    private void addNodeElse(T node) {
    	nodes[numNodes]=node;
    	edges[numNodes][numNodes]=false;
    	numNodes++;
    }
    /**
     * Método que comprueba que el vector de nodos está lleno
     * 
     * @return true o false
     */
    private boolean isFull() {
    	return nodes.length==numNodes;
    }
    /**  
     * Obtiene el índice de un nodo en el vector de nodos, y –1 si no existe
     *   
 	 * ¡¡¡ OJO que es privado porque depende de la implementación !!!
 	 */  
    protected int getNode(T node) {
    	for (int i=0; i<nodes.length; i++) {
    		if (nodes[i].equals(node)) {
    			return i;
    		}
    	}
    	return -1;
    }
    /**  
     * Indica si existe o no el nodo en el grafo  
     */  
    public boolean existsNode(T node) {
    	if (getNode(node)!=-1) {
    		return true;
    	} else {
    		return false;
    	}
    }  
    /**  
     * Inserta una arista con el peso indicado (> 0) entre dos nodos, uno origen y  
     * otro destino. Si la arista existe, no la inserta.  
     * Devuelve 0 si la inserta 
     * Se suman los valores de los errores si se dan varios simultaneamente, 
     * por ejemplo si se dan errores 1 y 2 el resultado es la suma de los valores correspondientes (-3) 
     * Error 1: No existe nodo origen, valor -1 
     * Error 2: No existe nodo destino, valor -2   
     * Error 3: Ya existe el nodo, valor -4 
     * Error 4: El peso no es válido, valor -8
     */ 
    public int addEdge(T source, T target, double edgeWeight) {
    	return 0;
    }  
    /**  
     * Comprueba si existe una arista entre dos nodos que se pasan como parámetro  
     * si alguno de los nodos no existe, no existe la arista evidentemente  
     */  
    public boolean existEdge(T source, T target) {
    	return true;
    }
    /**  
     * Devuelve el peso de la arista que conecta dos nodos 
     * Se suman los valores de los errores si se dan varios simultaneamente 
     * Error 1: No existe nodo origen, valor –1, 
     * Error 2: No existe nodo destino, valor -2 
     * Error 3: No existe la arista pero sí los nodos origen y destino, valor –4 
     */ 
    public double getEdge(T source, T target) {
    	return 0;
    } 
    /**  
     * Borra la arista del grafo que conecta dos nodos   
     * Se suman los valores de los errores si se dan varios simultaneamente 
     * Error 1: No existe nodo origen, valor –1, 
     * Error 2: No existe nodo destino, valor -2 
     * Error 3: No existe la arista pero sí los nodos origen y destino, valor –4 
     * devuelve 0 si la borra  
     */
    public int removeEdge(T source, T target) {
    	return 0;
    }  
    /**  
     * Borra el nodo deseado del vector de nodos así como las aristas de las que  
     * forma parte, devolviendo 0 si lo hace y –1 si no lo hace  
     */
    public int removeNode(T node) {
    	return 0;
    }
    /**  
     * Devuelve un String con la informacion del grafo  
     */  
    public String toString() {  
        DecimalFormat df = new DecimalFormat("#.##");
        String cadena = "";  
        cadena += "NODES\n";
        for (int i = 0; i < numNodes; i++) { 
            cadena += nodes[i].toString() + "\t";  
        }  
        cadena += "\n\nEDGES\n";  
        
        for (int i = 0; i < numNodes; i++) {  
            for (int j = 0; j < numNodes; j++) {  
                if (edges[i][j])  
                    cadena += "T\t";  
                else  
                    cadena += "F\t";  
            }  
            cadena += "\n";
        }  

        cadena += "\nWEIGHTS\n";  
        for (int i = 0; i < numNodes; i++) {  
            for (int j = 0; j < numNodes; j++) {  
                cadena += (edges[i][j]?df.format(weights[i][j]):"-") + "\t"; 
            }  
            cadena += "\n";  
        }  
        return cadena;  

   }  
}  

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2221)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2996)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-09-26 18:27:26.381
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2221)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2996)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-09-26 18:27:26.383
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2221)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2996)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-26 18:27:26.390
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;


import java.security.InvalidParameterException;
import java.text.DecimalFormat;

/**
 * Titulo: Clase Graph
 * 
 * @author UO281847
 * @version 24/09/2021
 * @param <T>
 */
public class Graph <T>{   
	/**
	 * Atributo nodes
	 */
    protected T[] nodes; // Vector de nodos   
    /**
     * Atributo edges
     */
    protected boolean[][] edges; // matriz de aristas   
    /**
     * Atributo weights
     */    
    protected double[][] weights; // matriz de pesos   
    /**
     * Atributo numNodes
     */
    protected int numNodes; // número de elementos en un momento dado   
   
   

    /**   
    * Se le pasa el numero maximo de nodos del grafo
    * 
    * @param tam, tanaño del vector de nodos
    */   
    @SuppressWarnings("unchecked")   
    public Graph(int tam) {   
        if (tam<0){
        	throw new InvalidParameterException("Error: No puede crear un grafo de tamaño negativo");
        }
        nodes = (T[])new Object[tam];
        edges = new boolean[tam][tam];
        weights = new double[tam][tam];
        numNodes=0;
    }       
    /**  
     * Inserta un nuevo nodo que se le pasa como parámetro si lo inserta devuelve 0.
     * Error 1: si ya existe, valor -1 
     * Error 2: no cabe, valor -2 
     * Error 3: el nodo a insertar no es válido, valor –4
     * Se suman los errores en caso de que se den varios, por ejemplo: 
     * si además de no ser válido no cabe, devuelve -6 (suma errores 2 y 3)
     * 
     * @return 0, -1, -2, -4 o la suma
     */   
     public int addNode(T node) {   
    	int error = 0;
      	if (existsNode(node)) {
      		error=error-1;
      	}
      	if (isFull()) {
      		error=error-2;
      	}
      	if (node.equals(null)) {
      		error=error-4;
      	}
      	return error;
     	if (numNodes==0) {
     		addNodeFirst(node);
     		return 0;
     	} else (numNodes>0) {
     		addNodeElse(node);
     		return 0;
     	}	
     		
    }    
    /**
     * Método que añade un nodo en la primera posición
     * 
     * @param node, nodo a añadir
     */
    private void addNodeFirst(T node) {
    	nodes[0]=node;
    	edges[0][0]=false;
    	numNodes++;
    }
    /**
     * Método que añade un nodo en la siguiente posición no ocupada
     *  
     * @param node, nodo a añadir
     */
    private void addNodeElse(T node) {
    	nodes[numNodes]=node;
    	edges[numNodes][numNodes]=false;
    	numNodes++;
    }
    /**
     * Método que comprueba que el vector de nodos está lleno
     * 
     * @return true o false
     */
    private boolean isFull() {
    	return nodes.length==numNodes;
    }
    /**  
     * Obtiene el índice de un nodo en el vector de nodos, y –1 si no existe
     *   
 	 * ¡¡¡ OJO que es privado porque depende de la implementación !!!
 	 */  
    protected int getNode(T node) {
    	for (int i=0; i<nodes.length; i++) {
    		if (nodes[i].equals(node)) {
    			return i;
    		}
    	}
    	return -1;
    }
    /**  
     * Indica si existe o no el nodo en el grafo  
     */  
    public boolean existsNode(T node) {
    	if (getNode(node)!=-1) {
    		return true;
    	} else {
    		return false;
    	}
    }  
    /**  
     * Inserta una arista con el peso indicado (> 0) entre dos nodos, uno origen y  
     * otro destino. Si la arista existe, no la inserta.  
     * Devuelve 0 si la inserta 
     * Se suman los valores de los errores si se dan varios simultaneamente, 
     * por ejemplo si se dan errores 1 y 2 el resultado es la suma de los valores correspondientes (-3) 
     * Error 1: No existe nodo origen, valor -1 
     * Error 2: No existe nodo destino, valor -2   
     * Error 3: Ya existe el nodo, valor -4 
     * Error 4: El peso no es válido, valor -8
     */ 
    public int addEdge(T source, T target, double edgeWeight) {
    	return 0;
    }  
    /**  
     * Comprueba si existe una arista entre dos nodos que se pasan como parámetro  
     * si alguno de los nodos no existe, no existe la arista evidentemente  
     */  
    public boolean existEdge(T source, T target) {
    	return true;
    }
    /**  
     * Devuelve el peso de la arista que conecta dos nodos 
     * Se suman los valores de los errores si se dan varios simultaneamente 
     * Error 1: No existe nodo origen, valor –1, 
     * Error 2: No existe nodo destino, valor -2 
     * Error 3: No existe la arista pero sí los nodos origen y destino, valor –4 
     */ 
    public double getEdge(T source, T target) {
    	return 0;
    } 
    /**  
     * Borra la arista del grafo que conecta dos nodos   
     * Se suman los valores de los errores si se dan varios simultaneamente 
     * Error 1: No existe nodo origen, valor –1, 
     * Error 2: No existe nodo destino, valor -2 
     * Error 3: No existe la arista pero sí los nodos origen y destino, valor –4 
     * devuelve 0 si la borra  
     */
    public int removeEdge(T source, T target) {
    	return 0;
    }  
    /**  
     * Borra el nodo deseado del vector de nodos así como las aristas de las que  
     * forma parte, devolviendo 0 si lo hace y –1 si no lo hace  
     */
    public int removeNode(T node) {
    	return 0;
    }
    /**  
     * Devuelve un String con la informacion del grafo  
     */  
    public String toString() {  
        DecimalFormat df = new DecimalFormat("#.##");
        String cadena = "";  
        cadena += "NODES\n";
        for (int i = 0; i < numNodes; i++) { 
            cadena += nodes[i].toString() + "\t";  
        }  
        cadena += "\n\nEDGES\n";  
        
        for (int i = 0; i < numNodes; i++) {  
            for (int j = 0; j < numNodes; j++) {  
                if (edges[i][j])  
                    cadena += "T\t";  
                else  
                    cadena += "F\t";  
            }  
            cadena += "\n";
        }  

        cadena += "\nWEIGHTS\n";  
        for (int i = 0; i < numNodes; i++) {  
            for (int j = 0; j < numNodes; j++) {  
                cadena += (edges[i][j]?df.format(weights[i][j]):"-") + "\t"; 
            }  
            cadena += "\n";  
        }  
        return cadena;  

   }  
}  

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2221)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2996)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-26 18:27:26.392
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2221)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2996)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-26 18:27:26.394
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2221)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2996)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2021-09-26 20:12:34.904 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-26 20:12:38.776
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-26 20:12:38.776
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2ee095c9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@185a0811,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-26 20:12:40.897
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2021-09-26 22:39:14.366 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-26 22:39:19.041
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-26 22:39:19.041
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@434d001d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@36453773,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-26 22:39:21.792
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2021-09-27 10:49:21.791 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-27 10:49:25.370
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-27 10:49:25.370
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@e2f6a45,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@24cbf894,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-27 10:49:27.970
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2021-09-27 22:16:42.332 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-27 22:16:46.412
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-27 22:16:46.412
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@24cbf894,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6c19769c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-27 22:16:49.242
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2021-09-28 11:56:36.531 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-28 11:56:41.006
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-28 11:56:41.006
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1f72fbd1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6f785a27,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-28 11:56:43.562
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2021-09-28 12:20:49.931 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product -data D:\Clase\3. Ingeniería Informática de Software\Segundo curso\Estructuras de Datos\Proyecto 2 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-09-28 12:20:51.749
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-09-28 12:20:51.749
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5831989d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@608f310a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-09-28 12:20:54.050
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2021-10-03 19:31:59.958 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 4 567 2021-10-03 19:32:47.275
!MESSAGE Workspace restored, but some problems occurred.
!SUBENTRY 1 org.eclipse.core.resources 4 567 2021-10-03 19:32:47.275
!MESSAGE Could not read metadata for '.org.eclipse.egit.core.cmp'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/.org.eclipse.egit.core.cmp)[567]: java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:888)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:868)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:724)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1555)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2480)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2231)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:475)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.lambda$2(BundleContextImpl.java:808)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:554)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:802)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:759)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1019)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:365)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:404)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:572)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:345)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:388)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:463)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:170)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.core.resources 4 567 2021-10-03 19:32:47.276
!MESSAGE The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
!STACK 0
java.lang.Exception: The project description file (.project) for '.org.eclipse.egit.core.cmp' is missing.  This file contains important information about the project.  The project will not function properly until this file is restored.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:908)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:888)
	at org.eclipse.core.internal.resources.SaveManager.restoreMetaInfo(SaveManager.java:868)
	at org.eclipse.core.internal.resources.SaveManager.restore(SaveManager.java:724)
	at org.eclipse.core.internal.resources.SaveManager.startup(SaveManager.java:1555)
	at org.eclipse.core.internal.resources.Workspace.startup(Workspace.java:2480)
	at org.eclipse.core.internal.resources.Workspace.open(Workspace.java:2231)
	at org.eclipse.core.resources.ResourcesPlugin.start(ResourcesPlugin.java:475)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.lambda$2(BundleContextImpl.java:808)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:554)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:802)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:759)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1019)
	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:365)
	at org.eclipse.osgi.container.Module.doStart(Module.java:605)
	at org.eclipse.osgi.container.Module.start(Module.java:468)
	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:404)
	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:117)
	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:572)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:345)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:388)
	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:41)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:463)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:170)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:153)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jface 2 0 2021-10-03 19:32:48.329
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-10-03 19:32:48.329
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3c116f26,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7db06c50,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-10-03 19:32:50.747
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.oomph.setup.ui 1 0 2021-10-03 19:32:57.934
!MESSAGE Setup tasks were performed during startup updating 6 preferences.See 'C:\Users\omart\eclipse\java-2021-03\eclipse\configuration\org.eclipse.oomph.setup\setup.log' for details
!SESSION 2021-10-04 12:20:58.161 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-10-04 12:21:03.504
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-10-04 12:21:03.504
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@41ddec69,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5e3cb58e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-10-04 12:21:06.356
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2021-10-06 00:09:13.343 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2021-10-06 00:09:23.235
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-10-06 00:09:23.235
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@44618fe6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2b15ba1a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-10-06 00:09:25.891
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\omart'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:34.112
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:34.115
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:34.116
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:34.375
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:34.377
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:34.379
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:40.365
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:40.367
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:40.369
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:42.422
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		g.existsEdge(1,2); //false
//		g.getEdge(1,2); //-3.0
//		g.addNode(1); //0
//		g.existsEdge(1,2); //false
//		g.getEdge(1,2); //-2.0
//		g.existsEdge(2,1); //false
//		g.getEdge(2,1); //-1.0
//		g.addNode(2); //0
//		g.existsEdge(1,2); //false
//		g.getEdge(1,2); //-4.0
//		g.addEdge(1,2,12.12); //0
//		g.addEdge(1,2,12.1212); //-4
//		g.addNode(3); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		g.existsEdge(3,2); //false
//		g.getEdge(1,3); //-4.0
//		g.getEdge(3,2); //-4.0
//		g.addEdge(1,1,11.11); //0
//		g.addEdge(1,2,12.12); //-4
//		g.addEdge(1,3,13.13); //0
//		g.addEdge(2,1,21.21); //0
//		g.addEdge(2,2,22.22); //0
//		g.addEdge(2,3,23.23); //0
//		g.addEdge(3,1,31.31); //0
//		g.addEdge(3,2,32.32); //0
//		g.addEdge(3,3,33.33); //0
//		g.addEdge(1,1,11.11); //-4
//		g.addEdge(1,2,12.12); //-4
//		g.addEdge(1,3,13.13); //-4
//		g.addEdge(2,1,21.21); //-4
//		g.addEdge(2,2,22.22); //-4
//		g.addEdge(2,3,23.23); //-4
//		g.addEdge(3,1,31.31); //-4
//		g.addEdge(3,2,32.32); //-4
//		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:42.424
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:42.426
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:42.466
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		g.existsEdge(1,2); //false
//		g.getEdge(1,2); //-3.0
//		g.addNode(1); //0
//		g.existsEdge(1,2); //false
//		g.getEdge(1,2); //-2.0
//		g.existsEdge(2,1); //false
//		g.getEdge(2,1); //-1.0
//		g.addNode(2); //0
//		g.existsEdge(1,2); //false
//		g.getEdge(1,2); //-4.0
//		g.addEdge(1,2,12.12); //0
//		g.addEdge(1,2,12.1212); //-4
//		g.addNode(3); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		g.existsEdge(3,2); //false
//		g.getEdge(1,3); //-4.0
//		g.getEdge(3,2); //-4.0
//		g.addEdge(1,1,11.11); //0
//		g.addEdge(1,2,12.12); //-4
//		g.addEdge(1,3,13.13); //0
//		g.addEdge(2,1,21.21); //0
//		g.addEdge(2,2,22.22); //0
//		g.addEdge(2,3,23.23); //0
//		g.addEdge(3,1,31.31); //0
//		g.addEdge(3,2,32.32); //0
//		g.addEdge(3,3,33.33); //0
//		g.addEdge(1,1,11.11); //-4
//		g.addEdge(1,2,12.12); //-4
//		g.addEdge(1,3,13.13); //-4
//		g.addEdge(2,1,21.21); //-4
//		g.addEdge(2,2,22.22); //-4
//		g.addEdge(2,3,23.23); //-4
//		g.addEdge(3,1,31.31); //-4
//		g.addEdge(3,2,32.32); //-4
//		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:42.468
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:42.470
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:44.467
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:44.469
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:44.470
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:44.512
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:44.514
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:44.515
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:44.558
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:44.560
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:44.562
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:44.637
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:44.639
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:44.641
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:44.805
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:44.807
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:44.809
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:44.852
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:44.854
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:44.855
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:44.898
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:44.920
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:44.921
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:46.667
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:46.669
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:46.671
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:47.015
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:47.017
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:47.018
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:47.519
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:47.521
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:47.522
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:50.685
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:50.686
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:50.688
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:50.728
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:50.730
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:50.731
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:53.060
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assg.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:53.062
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:53.063
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:55.104
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertEqg.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:55.106
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:55.107
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:56.648
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertEqualsg.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:56.650
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:56.651
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:56.763
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertEqualsg.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:56.765
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:56.767
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:58.192
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertEquals(g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:48:58.194
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:48:58.195
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:48:58.236
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertEquals(g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:48:58.238
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:48:58.239
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:02.237
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalseg.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:49:02.239
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:49:02.241
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:02.287
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalseg.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:49:02.289
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:49:02.291
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:03.281
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalse(g.existsEdge(1,2); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:49:03.283
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:49:03.285
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:06.328
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalse(g.existsEdge(1,2)); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:49:06.330
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:49:06.331
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:06.372
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalse(g.existsEdge(1,2)); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:49:06.374
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:49:06.375
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:07.677
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalse(g.existsEdge(1,2)); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:49:07.679
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:49:07.680
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:08.552
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalse(g.existsEdge(1,2)); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:49:08.554
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:49:08.555
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:10.471
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalse(g.existsEdge(1,2)); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:49:10.474
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:49:10.475
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:49:11.602
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
	@Test
	public void basicEdgeTest() {
		g=new Graph<Integer>(3); 
		assertFalse(g.existsEdge(1,2)); //false
		g.getEdge(1,2); //-3.0
		g.addNode(1); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-2.0
		g.existsEdge(2,1); //false
		g.getEdge(2,1); //-1.0
		g.addNode(2); //0
		g.existsEdge(1,2); //false
		g.getEdge(1,2); //-4.0
		g.addEdge(1,2,12.12); //0
		g.addEdge(1,2,12.1212); //-4
		g.addNode(3); //0
		assertFalse(g.existsEdge(1,3)); //false
		g.existsEdge(3,2); //false
		g.getEdge(1,3); //-4.0
		g.getEdge(3,2); //-4.0
		g.addEdge(1,1,11.11); //0
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //0
		g.addEdge(2,1,21.21); //0
		g.addEdge(2,2,22.22); //0
		g.addEdge(2,3,23.23); //0
		g.addEdge(3,1,31.31); //0
		g.addEdge(3,2,32.32); //0
		g.addEdge(3,3,33.33); //0
		g.addEdge(1,1,11.11); //-4
		g.addEdge(1,2,12.12); //-4
		g.addEdge(1,3,13.13); //-4
		g.addEdge(2,1,21.21); //-4
		g.addEdge(2,2,22.22); //-4
		g.addEdge(2,3,23.23); //-4
		g.addEdge(3,1,31.31); //-4
		g.addEdge(3,2,32.32); //-4
		g.addEdge(3,3,33.33); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:49:11.604
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:49:11.606
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:55:36.898
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:55:36.900
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:55:36.901
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:55:36.942
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): true
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): 0
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): 1.3
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:55:36.944
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
