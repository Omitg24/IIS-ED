!SESSION 2021-10-06 00:09:13.343 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file D:\Clase\3. Ingeniería Informática de Software\Segundo curso\Estructuras de Datos\Proyecto 2\ws2\.metadata\.bak_1.log
Created Time: 2021-10-06 00:58:37.691

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:37.692
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:37.692
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:40.148
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:58:40.148
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:58:40.149
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:40.189
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:40.189
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:40.190
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:40.940
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(2.
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:40.941
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:40.942
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:41.190
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(2.
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:58:41.191
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:58:41.191
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:43.230
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:58:43.231
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:58:43.231
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:43.441
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:43.442
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:43.442
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:45.270
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:58:45.271
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:58:45.272
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:45.310
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:45.311
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:45.312
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:53.018
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): 0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:53.019
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:53.020
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:56.314
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:58:56.315
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:58:56.315
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:56.566
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:56.567
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:56.568
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:58.854
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:58:58.855
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:58:58.856
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:58:58.894
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:58:58.895
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:58:58.896
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:03.396
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:03.396
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:03.397
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:03.435
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:03.436
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:03.437
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:04.436
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:04.436
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:04.437
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:04.475
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:04.475
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:04.476
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:05.476
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:05.477
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:05.478
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:05.516
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:05.517
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:05.517
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:10.809
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:10.810
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:10.811
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:21.489
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:21.490
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:21.490
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:22.525
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:22.526
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:22.526
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:22.564
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:22.565
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:22.566
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:25.565
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:25.566
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:25.567
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:25.606
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:25.607
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:25.608
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:29.107
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:29.108
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:29.108
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:29.146
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:29.147
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:29.147
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:30.147
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:30.147
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:30.148
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:30.186
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:30.187
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:30.188
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:36.347
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:36.348
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:36.348
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:45.441
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:45.442
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:45.443
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:47.732
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true////////
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:47.732
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:47.733
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:49.006
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): tru
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-10-06 00:59:49.007
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-10-06 00:59:49.008
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:49.232
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): tru
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:49.233
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:49.234
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:50.273
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:50.273
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:50.274
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-10-06 00:59:53.314
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package p2Grafos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Titulo: Clase GraphTests
 * 
 * @author UO281847
 * @version 24/09/2021
 */
public class GraphTests {
	private Graph<Integer> g;
///*
// * Pruebas del método addNode:	
// */
//	/**
//	 * Test del método addNode sin errores
//	 */
//	@Test
//	public void testAddNodeFirst() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 12;
//		assertEquals(0, g.addNode(node));
//		System.out.println(g.toString());	
//	}	
//	/**
//	 * Test del método addNode con nodo no valido
//	 */
//	@Test
//	public void testAddNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(-5, g.addNode(null));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya esta lleno
//	 */
//	@Test
//	public void testAddNodeFull() {
//		Graph<Integer> g = new Graph<Integer>(3);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4= 2;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(-2, g.addNode(node4));		
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addNode cuando ya existe
//	 */
//	@Test
//	public void testAddNodeAlreadyExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 39;
//		int node4 = 19;
//		int node5= 19;
//		assertEquals(0, g.addNode(node));
//		assertEquals(0, g.addNode(node2));
//		assertEquals(0, g.addNode(node3));
//		assertEquals(0, g.addNode(node4));
//		assertEquals(-1, g.addNode(node5));	
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getNode:
// */
//	/**
//	 * Test del método getNode que devuelve la posición
//	 */
//	@Test
//	public void testGetNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertEquals(0, g.getNode(node));
//	}
//	/**
//	 * Test del método getNode que devuelve la posición ya añadido
//	 */
//	@Test
//	public void testGetNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(1, g.getNode(node2));
//	}
//	/**
//	 * Test del método getNode que devuelve -1
//	 */
//	@Test
//	public void testGetNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertEquals(-1, g.getNode(node2));
//	}
//
///**
// * Pruebas del método existsNode:
// */
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeOne() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		g.addNode(node);
//		assertTrue(g.existsNode(node));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		g.addNode(node2);
//		assertTrue(g.existsNode(node2));
//	}
//	/**
//	 * Test del método existsNode que devuelve true
//	 */
//	@Test
//	public void testExistsNodeFalse() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 23;
//		g.addNode(node);
//		assertFalse(g.existsNode(node2));
//	}
//
///*
// * Pruebas del método addEdge:
// */
//	/**
//	 * Test del método addEdge que no tiene errores
//	 */
//	@Test
//	public void testAddEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(0, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testAddEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-1, g.addEdge(node3, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testAddEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 23;
//		g.addNode(node);
//		g.addNode(node2);		
//		assertEquals(-2, g.addEdge(node, node3, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista
//	 */
//	@Test
//	public void testAddEdgeEdgeExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 12);
//		assertEquals(-4, g.addEdge(node, node2, 12));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeWightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-8, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde no existen los nodos 
//	 */
//	@Test
//	public void testAddEdgeSourceTargetError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		int node4 = 56;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-3, g.addEdge(node3, node4, 4));
//		System.out.println(g.toString());	
//	}
//	/**
//	 * Test del método addEdge donde ya existe la arista y el peso no es valido
//	 */
//	@Test
//	public void testAddEdgeEdgeExistsEdgeWeightError() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-12, g.addEdge(node, node2, -4));
//		System.out.println(g.toString());	
//	}
//	
///*
// * Pruebas del método getEdge:
// */
//	/**
//	 * Test del método getEdge que no tiene errores
//	 */
//	@Test
//	public void testGetEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testGetEdgeSourceDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.getEdge(node3, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testGetEdgeTargetDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.getEdge(node, node3),0.1);
//	}
//	/**
//	 * Test del método getEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testGetEdgeEdgeDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		assertEquals(-4, g.getEdge(node, node2),0.1);
//	}
//	/**
//	 * Test del método getEdge donde no existen los nodos
//	 */
//	@Test
//	public void testGetEdgeBothDontExist() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 4;
//		int node4 = 6;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.getEdge(node3, node4),0.1);
//	}
//	
///*
// * Pruebas del método existsEdge:
// */
//	/**
//	 * Test del método existsEdge que no tiene errores
//	 */
//	@Test
//	public void testExistsEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertTrue(g.existsEdge(node, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testExistsEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node2));
//	}
//	/**
//	 * Test del método existsEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testExistsEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3= 8;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node, node3));
//	}
//	/**
//	 * Test del método existsEdge donde no existen los nodos
//	 */
//	@Test
//	public void testExistsEdgeBothDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertFalse(g.existsEdge(node3, node4));
//	}
//	
///*
// * Pruebas del método removeEdge:
// */
//	/**
//	 * Test del método removeEdge que no tiene errores 
//	 */
//	@Test
//	public void testRemoveEdgeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addNode(node3);
//		g.addNode(node4);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node3, node4, 12);
//		assertEquals(0, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo origen
//	 */
//	@Test
//	public void testRemoveEdgeSourceDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeEdge(node3, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde no existe el nodo destino
//	 */
//	@Test
//	public void testRemoveEdgeTargetDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-2, g.removeEdge(node2, node3));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeEdge donde existen los nodos y no la arista
//	 */
//	@Test
//	public void testRemoveEdgeEdgeDontExistsNodesExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		g.addNode(node);
//		g.addNode(node2); 
//		g.addEdge(node, node2, 4);
//		assertEquals(-4, g.removeEdge(node2, node));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeEdge donde no existen los nodos
//	 */
//	@Test
//	public void testRemoveEdgeNodesDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-3, g.removeEdge(node3, node4));
//		System.out.println(g.toString());
//	}
///*
// * Pruebas del método removeNode:
// */
//	/**
//	 * Test del método removeNode que no tiene errores
//	 */
//	@Test
//	public void testRemoveNodeNormal() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode que no tiene errores y borra toda la matriz
//	 */
//	@Test
//	public void testRemoveNodeVarious() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 8;
//		int node4 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		g.addEdge(node, node, 12);
//		g.addEdge(node3, node, 7);
//		g.addEdge(node, node4, 15);
//		g.addEdge(node, node3, 9);
//		assertEquals(0, g.removeNode(node));
//		assertFalse(g.existsNode(node));
//		assertFalse(g.existsEdge(node, node2));
//		assertFalse(g.existsEdge(node, node));
//		assertFalse(g.existsEdge(node3, node));
//		assertFalse(g.existsEdge(node, node4));
//		assertFalse(g.existsEdge(node, node3));
//		System.out.println(g.toString());
//	}	
//	/**
//	 * Test del método removeNode donde el nodo no es valido
//	 */
//	@Test
//	public void testRemoveNodeNotValid() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;		
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(null));
//		System.out.println(g.toString());
//	}
//	/**
//	 * Test del método removeNode donde el nodo no existe
//	 */
//	@Test
//	public void testRemoveNodeDontExists() {
//		Graph<Integer> g = new Graph<Integer>(5);
//		int node = 1;
//		int node2 = 18;
//		int node3 = 12;
//		g.addNode(node);
//		g.addNode(node2);
//		g.addEdge(node, node2, 4);
//		assertEquals(-1, g.removeNode(node3));
//		System.out.println(g.toString());
//	}
	/**
	 * Pruebas basicas de nodos
	 */
//	@Test
//	public void basicNodeTest() {
//		g=new Graph<Integer>(3); 
//	    assertFalse(g.existsNode(1)); //false
//	    assertFalse(g.existsNode(2)); //false
//	    assertEquals(0,g.addNode(1)); //0
//		assertEquals(0,g.addNode(2)); //0
//		assertTrue(g.existsNode(1)); //true
//		assertTrue(g.existsNode(2)); //true
//		assertEquals(-1,g.addNode(1)); //-1
//		assertEquals(-1,g.addNode(2)); //-1
//		assertEquals(0,g.addNode(3)); //0
//		assertEquals(-2,g.addNode(4)); //-2
//		assertFalse(g.existsNode(4)); //false
//		assertFalse(g.existsNode(5)); //false
//	}
	
//	@Test
//	public void basicEdgeTest() {
//		g=new Graph<Integer>(3); 
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-3.0,g.getEdge(1,2),0.1); //-3.0
//		assertEquals(0,g.addNode(1)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-2.0,g.getEdge(1,2),0.1); //-2.0
//		assertFalse(g.existsEdge(2,1)); //false
//		assertEquals(-1.0,g.getEdge(2,1),0.1); //-1.0
//		assertEquals(0,g.addNode(2)); //0
//		assertFalse(g.existsEdge(1,2)); //false
//		assertEquals(-4.0,g.getEdge(1,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,2,12.12)); //0
//		assertEquals(-4,g.addEdge(1,2,12.1212)); //-4
//		assertEquals(0,g.addNode(3)); //0
//		assertFalse(g.existsEdge(1,3)); //false
//		assertFalse(g.existsEdge(3,2)); //false
//		assertEquals(-4.0,g.getEdge(1,3),0.1); //-4.0
//		assertEquals(-4.0,g.getEdge(3,2),0.1); //-4.0
//		assertEquals(0,g.addEdge(1,1,11.11)); //0
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(0,g.addEdge(1,3,13.13)); //0
//		assertEquals(0,g.addEdge(2,1,21.21)); //0
//		assertEquals(0,g.addEdge(2,2,22.22)); //0
//		assertEquals(0,g.addEdge(2,3,23.23)); //0
//		assertEquals(0,g.addEdge(3,1,31.31)); //0
//		assertEquals(0,g.addEdge(3,2,32.32)); //0
//		assertEquals(0,g.addEdge(3,3,33.33)); //0
//		assertEquals(-4,g.addEdge(1,1,11.11)); //-4
//		assertEquals(-4,g.addEdge(1,2,12.12)); //-4
//		assertEquals(-4,g.addEdge(1,3,13.13)); //-4
//		assertEquals(-4,g.addEdge(2,1,21.21)); //-4
//		assertEquals(-4,g.addEdge(2,2,22.22)); //-4
//		assertEquals(-4,g.addEdge(2,3,23.23)); //-4
//		assertEquals(-4,g.addEdge(3,1,31.31)); //-4
//		assertEquals(-4,g.addEdge(3,2,32.32)); //-4
//		assertEquals(-4,g.addEdge(3,3,33.33)); //-4
//		g.getEdge(1,1,11.11); //11.11
//		g.getEdge(1,2,12.12); //12.12
//		g.getEdge(1,3,13.13); //13.129999999999999
//		g.getEdge(2,1,21.21); //21.21
//		g.getEdge(2,2,22.22); //22.22
//		g.getEdge(2,3,23.23); //23.23
//		g.getEdge(3,1,31.31); //31.310000000000002
//		g.getEdge(3,2,32.32); //32.32
//		g.getEdge(3,3,33.33); //33.33
//	}
	
	@Test
	public void basicEvolutionTest() {
		1 g.existsNode(1): //false
		2 g.existsNode(2): false
		3 g.addNode(1): 0
		4 g.addNode(2): 0
		5 g.existsNode(1): true
		6 g.existsNode(2): true
		7 g.addNode(1): -1
		8 g.addNode(2): -1
		9 g.addEdge(1,2, 1.2): 0
		10 g.addEdge(2,1, 2.1): 0
		11 g.addEdge(1,1, 1.1): 0
		12 g.getEdge(1,2): 1.2
		13 g.getEdge(2,1): 2.1
		14 g.getEdge(1,1): 1.1
		15 g.getEdge(2,3): -2.0
		16 g.existsEdge(1,2): true
		17 g.existsEdge(2,1): true
		18 g.existsEdge(1,1): true
		19 g.existsEdge(2,2): false
		20 g.removeEdge(2,2): -4
		21 g.addEdge(2,2,2.2): 0
		22 g.getEdge(2,2): 2.2
		23 g.existsEdge(2,2): true
		24 g.removeEdge(2,2): 0
		25 g.removeNode(3): -1
		26 g.addNode(3): 0
		27 g.addNode(4): -2
		28 g.getEdge(1, 3): -4.0
		29 g.addEdge(1,3, 1.3): 0
		30 g.existsEdge(1, 3): //true----------------(false)
		31 g.getEdge(1, 3): 1.3
		32 g.getEdge(1, 4): -2.0
		33 g.getEdge(5,1): -1.0
		34 g.getEdge(5,4): -3.0
		35 g.removeNode(3): 0
		36 g.removeNode(3): //0----------------(-1)
		37 g.existsEdge(1, 3): true
		38 g.getEdge(1, 3): //1.3-------------------(-2.0)
		39 g.removeNode(2): 0
		40 g.removeNode(2): //0---------------------(-1)
		41 g.existsEdge(1, 1): true
		42 g.removeNode(1): 0
		43 g.existsNode(1): //true----------------------(false)
		44 g.existsNode(2): true
		45 g.existsNode(3): true
		46 g.existsNode(4): false
		47 g.addNode(4): 0
		48 g.existsNode(4): true
		49 g.addEdge(4,4, 4.4): 0
		50 g.existsEdge(4, 4): true
		51 g.getEdge(4, 4): 4.4
		52 g.removeNode(4): 0
		53 g.removeNode(4): 0
		54 g.existsEdge(4, 4): true
		55 g.addNode(7): 0
		56 g.removeNode(2): 0
		57 g.removeNode(3): 0
		58 g.removeNode(4): -1
		59 g.existsEdge(7, 7): false
		60 g.addEdge(7,7, 7.7): 0
		61 g.addEdge(7,7, 17.17): -4
		62 g.getEdge(7, 7): 7.7
		63 g.addNode(8): 0
		64 g.addNode(9): 0
		65 g.existsEdge(7, 8): false
		66 g.existsEdge(8, 7): false
		67 g.existsEdge(8, 8): false
		68 g.existsEdge(8, 9): true
		69 g.existsEdge(9, 8): true
		70 g.existsEdge(9, 9): false
		71 g.addEdge(7,8, 7.8): 0
		72 g.addEdge(8,7, 8.7): 0
		73 g.addEdge(8,8, 8.8): 0
		74 g.addEdge(8,9, 8.9): -4
		75 g.addEdge(9,8, 9.8): -4
		76 g.addEdge(9,9, 9.9): 0
		77 g.addEdge(7,9, 7.9): 0
		78 g.addEdge(9,7, 9.7): 0
		79 g.getEdge(7, 7) --> -4.0
		80 g.getEdge(7, 8) --> 7.8
		81 g.getEdge(7, 9) --> 7.9
		82 g.getEdge(8, 7) --> 8.7
		83 g.getEdge(8, 8) --> 8.8
		84 g.getEdge(8, 9) --> 1.2
		85 g.getEdge(9, 7) --> 9.7
		86 g.getEdge(9, 8) --> 2.1
		87 g.getEdge(9, 9) --> 9.9
		88 g.removeNode(7): 0
		89 g.removeNode(7): 0
		90 g.getEdge(7, 7) --> -4.0
		91 g.getEdge(7, 8) --> 7.8
		92 g.getEdge(7, 9) --> 7.9
		93 g.getEdge(8, 7) --> 8.7
		94 g.getEdge(8, 8) --> 8.8
		95 g.getEdge(8, 9) --> 1.2
		96 g.getEdge(9, 7) --> 9.7
		97 g.getEdge(9, 8) --> 2.1
		98 g.getEdge(9, 9) --> 9.9
		99 g.removeNode(null): -1
		100 g.addNode(null): -4
		101 g.addNode(10): 0
		102 g.getEdge(8, 10) --> 8.7
		103 g.getEdge(10, 9) --> 7.9
		104 g.addNode(null): -6
		105 g.addEdge(8,8,-8.8): -12
		106 g.addEdge(7,8,-7.8): -9
		107 g.addEdge(8,7,-8.7): -10
		108 g.addEdge(7,7,-7.7): -11
		109 g.addEdge(null,8,0.8): -1
		110 g.addEdge(8,null,0.8): -2
		111 g.addEdge(null,null,0.8): -3
		112 g.getEdge(null,10): -1.0
		113 g.getEdge(10,null): -2.0
		114 g.getEdge(null,null): -3.0
		115 g.existsNode(null): false
		116 g.existsEdge(null,null): false
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-10-06 00:59:53.315
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-10-06 00:59:53.315
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
