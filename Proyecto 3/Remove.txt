/*
 * Prueba del método removeNode:
 */
	/**
	 * Test del método removeNode
	 */
	@Test
	public void removeNodeTest() {
		t = new BSTree<Integer>(); 
		assertEquals(0, t.addNode(10));
		assertEquals(0, t.addNode(4));
		assertEquals(0, t.removeNode(4));
		assertEquals(-2, t.removeNode(null));
		assertEquals(0, t.addNode(3));
		assertEquals(0, t.addNode(8));
		assertEquals(0, t.addNode(9));
		assertEquals(0, t.removeNode(9));
		assertEquals(0, t.addNode(12));		
		assertEquals(0, t.removeNode(12));
		assertEquals(-1, t.removeNode(12));
		assertEquals(-1, t.removeNode(9));
		assertEquals(-2, t.removeNode(null));
		System.out.println(t.toString());	
	}

/*
 * Prueba de evolución del arbol:
 */
	/**
	 * Test de evolución
	 */
	@Test
	public void evolutionTest() {
		t = new BSTree<Integer>();		
		assertEquals(0, t.addNode(8));
		assertEquals(-1, t.removeNode(4));
		assertEquals(0, t.addNode(4));
		assertEquals(0, t.addNode(6));
		assertEquals(-1, t.addNode(6));
		assertEquals(0, t.addNode(1));
		assertEquals(1, t.searchNode(1));
		assertEquals(0, t.addNode(2));
		assertEquals(0, t.removeNode(8));
		assertEquals(-1, t.removeNode(8));
		assertEquals(null, t.searchNode(8));
		assertEquals(0, t.addNode(10));
		assertEquals(-2, t.addNode(null));
		assertEquals(0, t.addNode(12));
		assertEquals(null, t.searchNode(null));
		assertEquals(0, t.addNode(8));
		assertEquals(0, t.removeNode(4));
		assertEquals(null, t.searchNode(4));
		assertEquals(0, t.addNode(4));
		assertEquals(-2, t.removeNode(null));
		assertEquals(-2, t.addNode(null));
		assertEquals(0, t.addNode(15));
		assertEquals(0, t.addNode(14));
		assertEquals(-1, t.addNode(12));
		assertEquals(0, t.removeNode(2));
		assertEquals(0, t.removeNode(1));
		assertEquals(0, t.removeNode(12));
		assertEquals(0, t.addNode(16));		
		assertEquals(-1, t.removeNode(13));
		assertEquals(-2, t.removeNode(null));
		assertEquals(0, t.addNode(13));
		assertEquals(0, t.addNode(3));
		assertEquals(0, t.addNode(2));
		assertEquals(-1, t.removeNode(1));
		assertEquals(-2, t.addNode(null));
		assertEquals(0, t.addNode(1));
		System.out.println(t.toString());	
	}
/**
	* Se le pasa el objeto que se quiere borrar que coincida con equals
	* Devuelve 0 si lo ha borrado, negativo en caso contrario
	*  (-1 si no existe, -2 otra causa)
	*  
	* @param info, info del nodo 
	*/
	public int removeNode (T info){
		try {			
			if (info!=null) {				
				setRoot(recursiveRemoveNode(info, raiz));
				return 0;				
			}
			return -2;
		} catch (RuntimeException e) {
			return -1;
		}
	}
	
	/**
	 * Método recursivo de eliminar el nodo
	 * 
	 * @param info, info del nodo
	 * @param raiz, raiz del nodo
	 * @return nodo a eliminar
	 */
	private BSTNode<T> recursiveRemoveNode(T info, BSTNode<T> raiz) {
		if (raiz==null) {
			throw new RuntimeException("El nodo no existe");
		} else if (info.compareTo(raiz.getInfo()) < 0 ) {
			raiz.setLeft(recursiveRemoveNode(info, raiz.getLeft()));
		} else if (info.compareTo(raiz.getInfo()) > 0 ) {
			raiz.setRight(recursiveRemoveNode(info, raiz.getRight()));
		} else if (info.compareTo(raiz.getInfo()) == 0 ) {
			if (raiz.getLeft()==null) {
				return raiz.getRight();
			} else if (raiz.getRight()==null) {
				return raiz.getLeft();
			}
			raiz.setInfo(maxNode(raiz.getLeft()));
			raiz.setLeft(recursiveRemoveNode(raiz.getInfo(), raiz.getLeft()));			
		}
		return raiz;	
	}
	/**
	 * Método que devuelve el nodo máximo de la raiz indicada
	 * 
	 * @param raiz, raiz del nodo
	 * @return nodo máximo
	 */
	private T maxNode(BSTNode<T> raiz) {
		if (raiz==null) {
			return null;
		}
		return recursiveMaxNode(raiz);
	}	
	
	/**
	 * Método recursivo del nodo máximo
	 * 
	 * @param raiz, raiz del nodo
	 * @return nodo máximo
	 */
	private T recursiveMaxNode(BSTNode<T> raiz) {
		if (raiz.getRight() == null) {
			return raiz.getInfo();
		}
		return recursiveMaxNode(raiz.getRight());
	}
