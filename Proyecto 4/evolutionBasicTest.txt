/**
	 * Prueba de evolución básica de tablas Hash
	 */
	@Test
	public void evolutionBasicTest() {
		ClosedHashTable<Integer> h = new ClosedHashTable<Integer>(8,ClosedHashTable.LINEAL);		
		assertEquals(11, h.getSize());
		assertEquals(0, h.getNumOfElems());
		assertNull(h.find(0));
		assertEquals(-2, h.remove(null));
		assertEquals(-1, h.remove(0));
		assertEquals(-2, h.add(null));
		assertEquals(0, h.getNumOfElems());
		assertEquals(0, h.add(0));
		assertEquals(0, h.find(0));
		assertEquals(1, h.getNumOfElems());
		assertEquals(0, h.remove(0));
		assertEquals(-1, h.remove(0));
		assertNull(h.find(0));
		assertEquals(0, h.getNumOfElems());
		assertEquals(0, h.add(7));
		assertEquals(-2, h.add(null));
		assertEquals(0, h.add(21));
		assertEquals(0, h.add(24));
		assertEquals(0, h.add(27));
		assertEquals(4, h.getNumOfElems());
		assertEquals(24, h.find(24));
		assertEquals(0, h.remove(24));
		assertEquals(-1, h.remove(24));
		assertEquals(-1, h.remove(24));
		assertNull(h.find(24));
		assertEquals(-2, h.remove(null));
		assertEquals(3, h.getNumOfElems());
		assertEquals(0, h.add(24));
		assertEquals(4, h.getNumOfElems());
		assertEquals(0, h.add(35));
		assertEquals(0, h.add(23));
		assertEquals(6, h.getNumOfElems());
		assertEquals(23, h.find(23));
		assertEquals(0, h.remove(23));
		assertEquals(-1, h.remove(23));
		assertEquals(-1, h.remove(23));
		assertNull(h.find(23));
		assertEquals(-2, h.remove(null));
		assertEquals(-2, h.add(null));
		assertEquals(0, h.add(23));
		assertEquals(23, h.find(23));
		assertEquals(0, h.add(50));
		assertEquals(50, h.find(50));
		assertEquals(0, h.add(75));
		assertEquals(75, h.find(75));
		assertEquals(0, h.add(91));
		assertEquals(91, h.find(91));
		assertEquals(9, h.getNumOfElems());
		assertNull(h.find(63));
		assertEquals(-2, h.remove(null));
		assertEquals(-2, h.add(null));
		assertEquals(0, h.add(25));
		assertEquals(10, h.getNumOfElems());
		assertEquals(0, h.add(19));
		assertEquals(11, h.getNumOfElems());
		assertEquals(11, h.getSize());
		assertTrue(h.getNumOfElems() == h.getSize());
		assertEquals(-2, h.remove(null));
		assertEquals(0, h.remove(19));
		assertEquals(10, h.getNumOfElems());
		assertEquals(-1, h.remove(19));
		assertEquals(-1, h.remove(19));
		assertEquals(0, h.add(19));
		assertEquals(11, h.getNumOfElems());
		assertTrue(h.getNumOfElems() == h.getSize());
		assertEquals(-2, h.add(null));
		assertEquals(-1, h.add(18));
		assertEquals(0, h.remove(19));
		assertEquals(10, h.getNumOfElems());
		assertEquals(0, h.add(18));
		assertNull(h.find(19));
		assertEquals(18, h.find(18));
		assertEquals(23, h.find(23));
		assertNull(h.find(null));
		System.out.println(h.toString());
	}